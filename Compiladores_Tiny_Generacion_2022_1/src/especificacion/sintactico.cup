package ve.edu.unet;

import java_cup.runtime.*;
import ve.edu.unet.nodosAST.*;
import java.io.InputStreamReader;


parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Lexico(new InputStreamReader(System.in),sf),sf);
		else
			parser_obj=new parser(new Lexico(new InputStreamReader(new java.io.FileInputStream(args[0])),sf),sf);

		parser_obj.parse();
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
        Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Semantico.setTablaSimbolos(ts);
        Semantico.checkSemantico(root);
		Generador.setTablaSimbolos(ts);
		Generador.generarCodigoObjeto(root);
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	
:}

/* Simbolos Terminales */

terminal PROGRAMA;
terminal PROCEDIMIENTO;
terminal VAR;
terminal INT;
terminal BOOL;
terminal BEGIN;
terminal AND;
terminal OR;
terminal NOT;
terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal String NUM;
terminal ASIGNACION;
terminal IGUAL;
terminal MENOR_QUE;
terminal MAYOR_QUE;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal MOD;
terminal LPAREN;
terminal RPAREN;
terminal LBRACKET;
terminal RBRACKET;
terminal PUNTO_COMA;
terminal FOR;
terminal WHILE;
terminal TO;
terminal DO;

terminal DOS_PUNTOS;
terminal COMMA;
terminal POINT;
terminal ARRAY;
terminal OF;

/* Simbolos No Terminales */
non terminal PROGRAM;
non terminal NodoBase BLOQUE;
non terminal NodoBase DECL_EXPRESION_SEQ;
non terminal NodoBase DECL_EXPRESION;
non terminal NodoBase EXPRESION_SEQUENCIA;
non terminal NodoBase EXPRESION_GENERAL;
non terminal NodoBase EXPRESION_IF;
non terminal NodoBase EXPRESION_REPEAT;
non terminal NodoBase DECLARACION_LISTA;
non terminal NodoBase EXPRESION_ASIGNACION;
non terminal NodoBase EXPRESION_LEER;
non terminal NodoBase EXPRESION_ESCRIBIR;
non terminal NodoBase EXPRESION_LOGICA;
non terminal NodoBase EXPRESION_NOT;
non terminal NodoBase EXPRESION;
non terminal NodoBase EXPRESION_SIMPLE;
non terminal NodoBase TERMINO;
non terminal NodoBase FACTOR;
non terminal NodoBase EXPRESION_FOR;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;


/* REGLAS GRAMATICALES */
PROGRAM ::= BLOQUE:s	{: if(debug) System.out.println("\t regla 1");
                ast = s;
            :}
        ;

BLOQUE ::= VAR DECL_EXPRESION_SEQ:dclstmt BEGIN EXPRESION_SEQUENCIA:body_seq END POINT{: if(debug) System.out.println("\t regla 2a");
            NodoBase tmp = ((NodoBase)new NodoDeclarationList(dclstmt));
            tmp.setHermanoDerecha(((NodoBase)new NodoDeclarationList(body_seq)));
            RESULT = tmp;
            :}
            | PROGRAMA ID PUNTO_COMA VAR DECL_EXPRESION_SEQ:dclstmt BEGIN EXPRESION_SEQUENCIA:body_seq END POINT{: if(debug) System.out.println("\t regla 2a");
            NodoBase tmp = ((NodoBase)new NodoDeclarationList(dclstmt));
            tmp.setHermanoDerecha(((NodoBase)new NodoDeclarationList(body_seq)));
            RESULT = tmp;
            :}
            | BEGIN EXPRESION_SEQUENCIA:bodystmt END POINT{: if(debug) System.out.println("\t regla 2b");
                RESULT = ((NodoBase)new NodoDeclarationList(bodystmt));
            :}
            ;

EXPRESION_SEQUENCIA ::=
    EXPRESION_SEQUENCIA:ini PUNTO_COMA EXPRESION_GENERAL:sent {:
            if(debug) System.out.println("\t regla EXPRESION_SEQUENCIA PUNTO_COMA EXPRESION_GENERAL");
            NodoBase hijoActual = ini;
            if(hijoActual !=null){
                while(hijoActual.TieneHermano()){
                    hijoActual = hijoActual.getHermanoDerecha();
                }
                hijoActual.setHermanoDerecha(sent);
                RESULT=ini;
            }else{
                RESULT=sent;
            }
        :}
    | EXPRESION_GENERAL:sent{:
            if(debug) System.out.println("\t regla EXPRESION_GENERAL");
            RESULT=sent;
        :}
    ;

DECL_EXPRESION_SEQ ::=
    DECL_EXPRESION_SEQ:ini DECL_EXPRESION:sent PUNTO_COMA{:
            if(debug) System.out.println("\t regla 4a");
            NodoBase hijoActual = ini;
            if(hijoActual !=null){
                while(hijoActual.TieneHermano()){
                    hijoActual = hijoActual.getHermanoDerecha();
                }
                hijoActual.setHermanoDerecha(sent);
                RESULT=ini;
            }else{
                RESULT=sent;
            }
        :}
    | DECL_EXPRESION:sent PUNTO_COMA{:
            if(debug) System.out.println("\t regla 4b");
            RESULT=sent;
        :}
    ;

DECL_EXPRESION ::= DECLARACION_LISTA:dcl_list_int DOS_PUNTOS INT {: if(debug) System.out.println("\t regla 5a");
            RESULT = new NodoDeclarationRow(tipoDec.entero, dcl_list_int);
      :}
      | DECLARACION_LISTA:dcl_list_int DOS_PUNTOS INT IGUAL NUM:num{:
                  if(debug) System.out.println("\t regla declaration_list_int con valor");
                RESULT = new NodoDeclarationRow(tipoDec.entero, dcl_list_int, new NodoValor(Integer.parseInt(num)));
            :}
      | DECLARACION_LISTA:dcl_list_bool DOS_PUNTOS BOOL {:
            if(debug) System.out.println("\t regla declaration_list_bool sin valor");
          RESULT = new NodoDeclarationRow(tipoDec.booleano, dcl_list_bool);

       :}
      | DECLARACION_LISTA:dcl_list_bool DOS_PUNTOS BOOL IGUAL ID:var {:
             if(debug) System.out.println("\t regla dcl_list_bool con valor");
             if(var.equals("True")) {
                 RESULT = new NodoDeclarationRow(tipoDec.booleano, dcl_list_bool, new NodoValor(1));
             } else if(var.equals("False")) {
                 RESULT = new NodoDeclarationRow(tipoDec.booleano, dcl_list_bool, new NodoValor(0));
             }  else {
                RESULT = new NodoDeclarationRow(tipoDec.booleano, dcl_list_bool, new NodoValor(2));
                System.out.println("error al declarar variable booleana");
             }
       :}
      | DECLARACION_LISTA:dcl_list_array DOS_PUNTOS ARRAY LBRACKET NUM:ini POINT POINT NUM:end RBRACKET OF INT {:
             if(debug) System.out.println("\t regla dcl_list_vector entero");
             RESULT = new NodoDeclarationRow(tipoDec.entero, dcl_list_array,Integer.parseInt(ini),Integer.parseInt(end));
       :}
      | error	{:

               if(debug) System.out.println("\t regla 5");
               System.out.println("Error: Declaracion de sentencia dentro del bloque var-begin");

               RESULT= null;

           :}
      ;

EXPRESION_GENERAL ::= EXPRESION_IF:sif	{: if(debug) System.out.println("\t regla 3a");
                RESULT=sif;
                :}
         | EXPRESION_REPEAT:srep	{: if(debug) System.out.println("\t regla 3b");
                    RESULT=srep;
                    :}
         | EXPRESION_ASIGNACION:sasi	{: if(debug) System.out.println("\t regla 3c");
                    RESULT=sasi;
                    :}
         | EXPRESION_LEER:slec	{: if(debug) System.out.println("\t regla 3d");
                RESULT=slec;
                :}
         | EXPRESION_ESCRIBIR:sesc 	{: if(debug) System.out.println("\t regla 3e");
                RESULT=sesc;
                :}
         | EXPRESION_FOR:sfor	{: if(debug) System.out.println("\t regla 3g");
                RESULT=sfor;
                    :}
         | error	{:

            if(debug) System.out.println("\t regla 3f");
            System.out.println("Error: Declaracion de sentencia dentro del bloque begin-end");

            RESULT= null;

            :}
         ;

DECLARACION_LISTA ::=
    DECLARACION_LISTA:ini COMMA EXPRESION_ASIGNACION:sent {:
            if(debug) System.out.println("\t regla 7a");

            if(debug) System.out.println("declaracion de lista de variables");
            NodoBase hijoActual = ini;
            if(hijoActual !=null){
                while(hijoActual.TieneHermano()){
                    hijoActual = hijoActual.getHermanoDerecha();
                }
                hijoActual.setHermanoDerecha(sent);
                RESULT=ini;
            }else{
                RESULT=sent;
            }
        :}
    | EXPRESION_ASIGNACION:var {:
            if(debug) System.out.println("\t regla 7b");

            if(debug) System.out.println("asignacion simple");
            RESULT= var;
        :}
;

EXPRESION_IF     ::= IF EXPRESION_LOGICA:ex THEN EXPRESION_SEQUENCIA:pthen END	{:
                    if(debug) System.out.println("\t regla 4a");
                    RESULT = new NodoIf(ex,pthen);
                :}
                | IF EXPRESION_LOGICA:ex THEN EXPRESION_SEQUENCIA:pthen ELSE EXPRESION_SEQUENCIA:pelse END	{:
                    if(debug) System.out.println("\t regla 4b");
                    RESULT = new NodoIf(ex,pthen,pelse);
                :}
		;

EXPRESION_REPEAT ::= REPEAT EXPRESION_SEQUENCIA:cuerpo UNTIL EXPRESION:prueba	{: if(debug) System.out.println("\t regla 5");
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;

EXPRESION_ASIGNACION ::=
        ID:variable {:
            if(debug) System.out.println("declaracion de variable sin valor");
            if (variable != null)
                RESULT = new NodoAsignacion(new NodoIdentificador(variable.toString())); // Se inicializa un variable sin valor.
            else {
                RESULT = null;
                System.out.println("Ocurrio error en cup # 0001");
            }
        :}
        |
        ID:variable ASIGNACION EXPRESION_LOGICA:ex	{: if(debug) System.out.println("\t regla 6 parte final");
                if(variable!=null) {
                    RESULT = new NodoAsignacion(new NodoIdentificador(variable.toString()),ex);
                } else{
                    RESULT = null;
                    System.out.println("Ocurrio error en cup # 0001");
                }
                :}
        |
        ID:variable LBRACKET EXPRESION_SIMPLE:exp RBRACKET ASIGNACION EXPRESION_SIMPLE:ex	{:
                    if(debug) System.out.println("\t regla asignacion de vector");
                    if(variable!=null) {
                        RESULT = new NodoAsignacion(
                        new NodoIdentificador(variable.toString(),
                        exp),
                        ex);
                    } else{
                        RESULT = null;
                        System.out.println("Ocurrio error en cup # 0001");
                    }
                    :}
		;

EXPRESION_LEER   ::= READ ID:variable	{: if(debug) System.out.println("\t regla 7");
                System.out.println("Leyendo Variable");
                if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
                else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
                }
					:}
		;

EXPRESION_ESCRIBIR  ::= WRITE EXPRESION:ex	{: if(debug) System.out.println("\t regla 8");
					RESULT= new NodoEscribir(ex);
					:}
		;

EXPRESION_LOGICA ::=
    EXPRESION_NOT:exI AND EXPRESION_LOGICA:exD {:
            if(debug) System.out.println("\t regla expresion logica AND");
            RESULT = new NodoOperacion(exI, tipoOp.and, exD);
        :}
    | EXPRESION_NOT:exI OR EXPRESION_LOGICA:exD {:
            if(debug) System.out.println("\t regla expresion logica OR");
            RESULT = new NodoOperacion(exI, tipoOp.or, exD);
        :}
    | EXPRESION_NOT:ex {: RESULT = ex; :}
    ;

EXPRESION_NOT ::=
    NOT EXPRESION_NOT:ex {:
            if(debug) System.out.println("\t regla EXPRESION_NOT");
            RESULT = new NodoOperacionNot(tipoOp.not, ex);
        :}
    | EXPRESION:ex {: if(debug) System.out.println("\t regla EXPRESION");
            RESULT = ex;
        :}
;

EXPRESION         ::= EXPRESION_SIMPLE:exI MENOR_QUE EXPRESION_SIMPLE:exD	{: if(debug) System.out.println("\t regla 9a");
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								:}
        | EXPRESION_SIMPLE:exI MAYOR_QUE EXPRESION_SIMPLE:exD	{: if(debug) System.out.println("\t regla 9d");
                            RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
                            :}
		| EXPRESION_SIMPLE:exI IGUAL EXPRESION_SIMPLE:exD	{: if(debug) System.out.println("\t regla 9b");
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
		| EXPRESION_SIMPLE:ex	{: if(debug) System.out.println("\t regla 9c");
					RESULT = ex;
					:}
		;

EXPRESION_SIMPLE  ::= EXPRESION_SIMPLE:exI PLUS TERMINO:exD	{: if(debug) System.out.println("\t regla 10a");
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| EXPRESION_SIMPLE:exI MINUS TERMINO:exD	{: if(debug) System.out.println("\t regla 10b");
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| TERMINO:ex	{: if(debug) System.out.println("\t regla 10c");
				RESULT=ex;
				:}
		;

TERMINO        ::= TERMINO:exI TIMES FACTOR:exD	{: if(debug) System.out.println("\t regla 11a");
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| TERMINO:exI OVER FACTOR:exD	{: if(debug) System.out.println("\t regla 11b");
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
        | TERMINO:exI MOD FACTOR:exD {:
                    if(debug) System.out.println("\t regla MOD");
                    RESULT = new NodoOperacion(exI,tipoOp.mod,exD);
                :}
		| FACTOR:ex	{: if(debug) System.out.println("\t regla 11c");
					RESULT=ex;
					:}
		;

FACTOR      ::= LPAREN EXPRESION:ex RPAREN	{: if(debug) System.out.println("\t regla 12a");
							RESULT = ex;
							:}
		| NUM:valor	{: if(debug) System.out.println("\t regla 12b");
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(Integer.parseInt(valor));
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| ID:variable	{: if(debug) System.out.println("\t regla 12c");
					if(variable!=null){
					    if(variable.toString().equals("True")) {
                             RESULT = new NodoValor(1);
                         } else if(variable.toString().equals("False")) {
                             RESULT = new NodoValor(0);
                         }  else {
                            System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
                            RESULT= new NodoIdentificador(variable.toString());
						 }
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| error	{: if(debug) System.out.println("\t regla 12d");
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;


EXPRESION_FOR    ::= FOR EXPRESION:condition TO EXPRESION:final_value DO BEGIN EXPRESION_SEQUENCIA:cuerpo END   {: if(debug) System.out.println("\t regla 13");
        RESULT = new NodoFor(condition, final_value, cuerpo);
        :}
        ;

