
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ve.edu.unet;

import java_cup.runtime.*;
import ve.edu.unet.nodosAST.*;
import java.io.InputStreamReader;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\003\000\002\002\004\000\002\003" +
    "\010\000\002\003\013\000\002\003\006\000\002\006\005" +
    "\000\002\006\003\000\002\004\005\000\002\004\004\000" +
    "\002\005\005\000\002\005\007\000\002\005\005\000\002" +
    "\005\007\000\002\005\015\000\002\005\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\012\005\000\002\012\003\000\002\010\007\000\002" +
    "\010\011\000\002\011\006\000\002\013\003\000\002\013" +
    "\005\000\002\013\010\000\002\014\004\000\002\015\004" +
    "\000\002\016\005\000\002\016\005\000\002\016\003\000" +
    "\002\017\004\000\002\017\003\000\002\020\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\003\000\002\021\005" +
    "\000\002\021\005\000\002\021\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\003\000\002" +
    "\023\005\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\024\012" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\010\004\007\006\004\011\005\001\002\000" +
    "\006\003\020\025\016\001\002\000\020\003\062\015\060" +
    "\021\052\023\051\024\061\025\016\050\054\001\002\000" +
    "\004\002\001\001\002\000\004\025\012\001\002\000\004" +
    "\002\011\001\002\000\004\002\000\001\002\000\004\047" +
    "\013\001\002\000\004\006\014\001\002\000\006\003\020" +
    "\025\016\001\002\000\006\054\uffea\055\uffea\001\002\000" +
    "\022\017\uffe6\020\uffe6\022\uffe6\027\165\045\166\047\uffe6" +
    "\054\uffe6\055\uffe6\001\002\000\010\003\020\011\046\025" +
    "\016\001\002\000\004\047\ufff3\001\002\000\004\047\045" +
    "\001\002\000\006\054\024\055\023\001\002\000\004\025" +
    "\016\001\002\000\010\007\026\010\025\057\027\001\002" +
    "\000\006\030\042\047\ufff6\001\002\000\006\030\040\047" +
    "\ufff8\001\002\000\004\045\030\001\002\000\004\026\031" +
    "\001\002\000\004\056\032\001\002\000\004\056\033\001" +
    "\002\000\004\026\034\001\002\000\004\046\035\001\002" +
    "\000\004\060\036\001\002\000\004\007\037\001\002\000" +
    "\004\047\ufff4\001\002\000\004\026\041\001\002\000\004" +
    "\047\ufff7\001\002\000\004\025\043\001\002\000\004\047" +
    "\ufff5\001\002\000\006\054\uffeb\055\uffeb\001\002\000\010" +
    "\003\ufff9\011\ufff9\025\ufff9\001\002\000\020\003\062\015" +
    "\060\021\052\023\051\024\061\025\016\050\054\001\002" +
    "\000\004\047\050\001\002\000\010\003\ufffa\011\ufffa\025" +
    "\ufffa\001\002\000\004\025\164\001\002\000\020\003\062" +
    "\015\060\021\052\023\051\024\061\025\016\050\054\001" +
    "\002\000\012\017\ufff1\020\ufff1\022\ufff1\047\ufff1\001\002" +
    "\000\012\003\076\025\073\026\074\043\102\001\002\000" +
    "\012\017\uffef\020\uffef\022\uffef\047\uffef\001\002\000\012" +
    "\017\ufff2\020\ufff2\022\ufff2\047\ufff2\001\002\000\012\017" +
    "\uffed\020\uffed\022\uffed\047\uffed\001\002\000\014\003\076" +
    "\014\135\025\073\026\074\043\102\001\002\000\012\003" +
    "\076\025\073\026\074\043\102\001\002\000\012\017\uffec" +
    "\020\uffec\022\uffec\047\uffec\001\002\000\012\017\uffee\020" +
    "\uffee\022\uffee\047\uffee\001\002\000\012\017\ufffb\020\ufffb" +
    "\022\ufffb\047\ufffb\001\002\000\006\020\070\047\067\001" +
    "\002\000\012\017\ufff0\020\ufff0\022\ufff0\047\ufff0\001\002" +
    "\000\020\003\062\015\060\021\052\023\051\024\061\025" +
    "\016\050\054\001\002\000\004\056\071\001\002\000\004" +
    "\002\ufffe\001\002\000\012\017\ufffc\020\ufffc\022\ufffc\047" +
    "\ufffc\001\002\000\062\012\uffcc\013\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\022\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\044\uffcc\046\uffcc\047\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\001\002\000\062\012\uffcd\013\uffcd\016\uffcd\017\uffcd" +
    "\020\uffcd\022\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\044\uffcd\046\uffcd\047\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\001\002\000\062\012\uffcf\013\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\022\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\044\uffcf\046\uffcf\047\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\001\002\000\062\012\uffcb\013\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\022\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\044\uffcb\046\uffcb\047\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\001\002\000\062\012\uffd3\013\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\022\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\036\uffd3\037\uffd3\040\122\041\121\042\120" +
    "\044\uffd3\046\uffd3\047\uffd3\052\uffd3\053\uffd3\054\uffd3\055" +
    "\uffd3\001\002\000\012\017\uffe2\020\uffe2\022\uffe2\047\uffe2" +
    "\001\002\000\052\012\uffd6\013\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\022\uffd6\030\107\031\111\032\106\033\113\034\105" +
    "\035\114\036\110\037\112\044\uffd6\047\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\001\002\000\012\003\076\025\073" +
    "\026\074\043\102\001\002\000\004\044\104\001\002\000" +
    "\062\012\uffce\013\uffce\016\uffce\017\uffce\020\uffce\022\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\044\uffce\046\uffce" +
    "\047\uffce\052\uffce\053\uffce\054\uffce\055\uffce\001\002\000" +
    "\012\003\076\025\073\026\074\043\102\001\002\000\012" +
    "\003\076\025\073\026\074\043\102\001\002\000\012\003" +
    "\076\025\073\026\074\043\102\001\002\000\012\003\076" +
    "\025\073\026\074\043\102\001\002\000\012\003\076\025" +
    "\073\026\074\043\102\001\002\000\012\003\076\025\073" +
    "\026\074\043\102\001\002\000\012\003\076\025\073\026" +
    "\074\043\102\001\002\000\012\003\076\025\073\026\074" +
    "\043\102\001\002\000\036\012\uffd9\013\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\022\uffd9\036\110\037\112\044\uffd9\047\uffd9" +
    "\052\uffd9\053\uffd9\054\uffd9\055\uffd9\001\002\000\036\012" +
    "\uffda\013\uffda\016\uffda\017\uffda\020\uffda\022\uffda\036\110" +
    "\037\112\044\uffda\047\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\001\002\000\062\012\uffd4\013\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\022\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034" +
    "\uffd4\035\uffd4\036\uffd4\037\uffd4\040\122\041\121\042\120" +
    "\044\uffd4\046\uffd4\047\uffd4\052\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\001\002\000\012\003\076\025\073\026\074\043\102" +
    "\001\002\000\012\003\076\025\073\026\074\043\102\001" +
    "\002\000\012\003\076\025\073\026\074\043\102\001\002" +
    "\000\062\012\uffd2\013\uffd2\016\uffd2\017\uffd2\020\uffd2\022" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\044\uffd2\046" +
    "\uffd2\047\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\001\002" +
    "\000\062\012\uffd1\013\uffd1\016\uffd1\017\uffd1\020\uffd1\022" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\044\uffd1\046" +
    "\uffd1\047\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\001\002" +
    "\000\062\012\uffd0\013\uffd0\016\uffd0\017\uffd0\020\uffd0\022" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\046" +
    "\uffd0\047\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\001\002" +
    "\000\036\012\uffd7\013\uffd7\016\uffd7\017\uffd7\020\uffd7\022" +
    "\uffd7\036\110\037\112\044\uffd7\047\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\001\002\000\062\012\uffd5\013\uffd5\016" +
    "\uffd5\017\uffd5\020\uffd5\022\uffd5\030\uffd5\031\uffd5\032\uffd5" +
    "\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\122\041" +
    "\121\042\120\044\uffd5\046\uffd5\047\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\001\002\000\036\012\uffd8\013\uffd8\016" +
    "\uffd8\017\uffd8\020\uffd8\022\uffd8\036\110\037\112\044\uffd8" +
    "\047\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\001\002\000" +
    "\036\012\uffdc\013\uffdc\016\uffdc\017\uffdc\020\uffdc\022\uffdc" +
    "\036\110\037\112\044\uffdc\047\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\001\002\000\036\012\uffdb\013\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\022\uffdb\036\110\037\112\044\uffdb\047" +
    "\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\001\002\000\024" +
    "\012\146\013\147\016\uffdf\017\uffdf\020\uffdf\022\uffdf\047" +
    "\uffdf\054\uffdf\055\uffdf\001\002\000\004\016\140\001\002" +
    "\000\014\003\076\014\135\025\073\026\074\043\102\001" +
    "\002\000\024\012\uffdd\013\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\022\uffdd\047\uffdd\054\uffdd\055\uffdd\001\002\000\024\012" +
    "\uffde\013\uffde\016\uffde\017\uffde\020\uffde\022\uffde\047\uffde" +
    "\054\uffde\055\uffde\001\002\000\020\003\062\015\060\021" +
    "\052\023\051\024\061\025\016\050\054\001\002\000\010" +
    "\017\142\020\143\047\067\001\002\000\020\003\062\015" +
    "\060\021\052\023\051\024\061\025\016\050\054\001\002" +
    "\000\012\017\uffe9\020\uffe9\022\uffe9\047\uffe9\001\002\000" +
    "\006\020\145\047\067\001\002\000\012\017\uffe8\020\uffe8" +
    "\022\uffe8\047\uffe8\001\002\000\014\003\076\014\135\025" +
    "\073\026\074\043\102\001\002\000\014\003\076\014\135" +
    "\025\073\026\074\043\102\001\002\000\020\016\uffe0\017" +
    "\uffe0\020\uffe0\022\uffe0\047\uffe0\054\uffe0\055\uffe0\001\002" +
    "\000\020\016\uffe1\017\uffe1\020\uffe1\022\uffe1\047\uffe1\054" +
    "\uffe1\055\uffe1\001\002\000\004\052\153\001\002\000\012" +
    "\003\076\025\073\026\074\043\102\001\002\000\004\053" +
    "\155\001\002\000\004\011\156\001\002\000\020\003\062" +
    "\015\060\021\052\023\051\024\061\025\016\050\054\001" +
    "\002\000\006\020\160\047\067\001\002\000\012\017\uffca" +
    "\020\uffca\022\uffca\047\uffca\001\002\000\006\022\162\047" +
    "\067\001\002\000\012\003\076\025\073\026\074\043\102" +
    "\001\002\000\012\017\uffe7\020\uffe7\022\uffe7\047\uffe7\001" +
    "\002\000\012\017\uffe3\020\uffe3\022\uffe3\047\uffe3\001\002" +
    "\000\014\003\076\014\135\025\073\026\074\043\102\001" +
    "\002\000\012\003\076\025\073\026\074\043\102\001\002" +
    "\000\010\036\110\037\112\046\170\001\002\000\004\027" +
    "\171\001\002\000\012\003\076\025\073\026\074\043\102" +
    "\001\002\000\022\017\uffe4\020\uffe4\022\uffe4\036\110\037" +
    "\112\047\uffe4\054\uffe4\055\uffe4\001\002\000\016\017\uffe5" +
    "\020\uffe5\022\uffe5\047\uffe5\054\uffe5\055\uffe5\001\002\000" +
    "\006\020\175\047\067\001\002\000\004\056\176\001\002" +
    "\000\004\002\ufffd\001\002\000\010\003\020\011\200\025" +
    "\016\001\002\000\020\003\062\015\060\021\052\023\051" +
    "\024\061\025\016\050\054\001\002\000\006\020\202\047" +
    "\067\001\002\000\004\056\203\001\002\000\004\002\uffff" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\006\002\007\003\005\001\001\000\012\004" +
    "\176\005\020\012\021\013\014\001\001\000\022\006\173" +
    "\007\063\010\055\011\052\013\065\014\054\015\062\024" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\016\005\020\012\021\013\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\046\012" +
    "\021\013\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\064\007\063\010\055\011" +
    "\052\013\065\014\054\015\062\024\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\006" +
    "\160\007\063\010\055\011\052\013\065\014\054\015\062" +
    "\024\056\001\001\000\002\001\001\000\012\020\151\021" +
    "\100\022\076\023\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\016\133\017\132\020" +
    "\135\021\100\022\076\023\074\001\001\000\012\020\077" +
    "\021\100\022\076\023\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\007\071\010\055\011\052\013\065\014" +
    "\054\015\062\024\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\102\021" +
    "\100\022\076\023\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\021\131\022\076\023\074\001\001\000" +
    "\010\021\130\022\076\023\074\001\001\000\010\021\127" +
    "\022\076\023\074\001\001\000\006\022\126\023\074\001" +
    "\001\000\010\021\125\022\076\023\074\001\001\000\006" +
    "\022\116\023\074\001\001\000\010\021\115\022\076\023" +
    "\074\001\001\000\010\021\114\022\076\023\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\124\001\001\000\004\023\123\001\001\000\004" +
    "\023\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\017\136\020\135\021\100" +
    "\022\076\023\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\140\007\063\010\055\011\052\013\065" +
    "\014\054\015\062\024\056\001\001\000\002\001\001\000" +
    "\022\006\143\007\063\010\055\011\052\013\065\014\054" +
    "\015\062\024\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\150\017\132\020\135" +
    "\021\100\022\076\023\074\001\001\000\016\016\147\017" +
    "\132\020\135\021\100\022\076\023\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\153\021\100\022\076\023\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\156\007\063\010\055\011" +
    "\052\013\065\014\054\015\062\024\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\162\021\100\022\076\023\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\016\172\017\132\020\135\021" +
    "\100\022\076\023\074\001\001\000\010\021\166\022\076" +
    "\023\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\171\022\076\023\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\046\012\021\013\014\001\001" +
    "\000\022\006\200\007\063\010\055\011\052\013\065\014" +
    "\054\015\062\024\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Lexico(new InputStreamReader(System.in),sf),sf);
		else
			parser_obj=new parser(new Lexico(new InputStreamReader(new java.io.FileInputStream(args[0])),sf),sf);

		parser_obj.parse();
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
        Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Semantico.setTablaSimbolos(ts);
        Semantico.checkSemantico(root);
		Generador.setTablaSimbolos(ts);
		Generador.generarCodigoObjeto(root);
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= BLOQUE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 1");
                ast = s;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOQUE ::= VAR DECL_EXPRESION_SEQ BEGIN EXPRESION_SEQUENCIA END POINT 
            {
              NodoBase RESULT =null;
		int dclstmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dclstmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase dclstmt = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int body_seqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int body_seqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase body_seq = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 2a");
            NodoBase tmp = ((NodoBase)new NodoDeclarationList(dclstmt));
            tmp.setHermanoDerecha(((NodoBase)new NodoDeclarationList(body_seq)));
            RESULT = tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOQUE ::= PROGRAMA ID PUNTO_COMA VAR DECL_EXPRESION_SEQ BEGIN EXPRESION_SEQUENCIA END POINT 
            {
              NodoBase RESULT =null;
		int dclstmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dclstmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase dclstmt = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int body_seqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int body_seqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase body_seq = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 2a");
            NodoBase tmp = ((NodoBase)new NodoDeclarationList(dclstmt));
            tmp.setHermanoDerecha(((NodoBase)new NodoDeclarationList(body_seq)));
            RESULT = tmp;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOQUE ::= BEGIN EXPRESION_SEQUENCIA END POINT 
            {
              NodoBase RESULT =null;
		int bodystmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bodystmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase bodystmt = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 2b");
                RESULT = ((NodoBase)new NodoDeclarationList(bodystmt));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EXPRESION_SEQUENCIA ::= EXPRESION_SEQUENCIA PUNTO_COMA EXPRESION_GENERAL 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(debug) System.out.println("\t regla EXPRESION_SEQUENCIA PUNTO_COMA EXPRESION_GENERAL");
            NodoBase hijoActual = ini;
            if(hijoActual !=null){
                while(hijoActual.TieneHermano()){
                    hijoActual = hijoActual.getHermanoDerecha();
                }
                hijoActual.setHermanoDerecha(sent);
                RESULT=ini;
            }else{
                RESULT=sent;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_SEQUENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EXPRESION_SEQUENCIA ::= EXPRESION_GENERAL 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(debug) System.out.println("\t regla EXPRESION_GENERAL");
            RESULT=sent;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_SEQUENCIA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL_EXPRESION_SEQ ::= DECL_EXPRESION_SEQ DECL_EXPRESION PUNTO_COMA 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if(debug) System.out.println("\t regla 4a");
            NodoBase hijoActual = ini;
            if(hijoActual !=null){
                while(hijoActual.TieneHermano()){
                    hijoActual = hijoActual.getHermanoDerecha();
                }
                hijoActual.setHermanoDerecha(sent);
                RESULT=ini;
            }else{
                RESULT=sent;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_EXPRESION_SEQ",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL_EXPRESION_SEQ ::= DECL_EXPRESION PUNTO_COMA 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            if(debug) System.out.println("\t regla 4b");
            RESULT=sent;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_EXPRESION_SEQ",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL_EXPRESION ::= DECLARACION_LISTA DOS_PUNTOS INT 
            {
              NodoBase RESULT =null;
		int dcl_list_intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dcl_list_intright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase dcl_list_int = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla 5a");
            RESULT = new NodoDeclarationRow(tipoDec.entero, dcl_list_int);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DECL_EXPRESION ::= DECLARACION_LISTA DOS_PUNTOS INT IGUAL NUM 
            {
              NodoBase RESULT =null;
		int dcl_list_intleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dcl_list_intright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase dcl_list_int = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                  if(debug) System.out.println("\t regla declaration_list_int con valor");
                RESULT = new NodoDeclarationRow(tipoDec.entero, dcl_list_int, new NodoValor(Integer.parseInt(num)));
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DECL_EXPRESION ::= DECLARACION_LISTA DOS_PUNTOS BOOL 
            {
              NodoBase RESULT =null;
		int dcl_list_boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dcl_list_boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase dcl_list_bool = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            if(debug) System.out.println("\t regla declaration_list_bool sin valor");
          RESULT = new NodoDeclarationRow(tipoDec.booleano, dcl_list_bool);

       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECL_EXPRESION ::= DECLARACION_LISTA DOS_PUNTOS BOOL IGUAL ID 
            {
              NodoBase RESULT =null;
		int dcl_list_boolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dcl_list_boolright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase dcl_list_bool = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             if(debug) System.out.println("\t regla dcl_list_bool con valor");
             if(var.equals("True")) {
                 RESULT = new NodoDeclarationRow(tipoDec.booleano, dcl_list_bool, new NodoValor(1));
             } else if(var.equals("False")) {
                 RESULT = new NodoDeclarationRow(tipoDec.booleano, dcl_list_bool, new NodoValor(0));
             }  else {
                RESULT = new NodoDeclarationRow(tipoDec.booleano, dcl_list_bool, new NodoValor(2));
                System.out.println("error al declarar variable booleana");
             }
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECL_EXPRESION ::= DECLARACION_LISTA DOS_PUNTOS ARRAY LBRACKET NUM POINT POINT NUM RBRACKET OF INT 
            {
              NodoBase RESULT =null;
		int dcl_list_arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int dcl_list_arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		NodoBase dcl_list_array = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String ini = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String end = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
             if(debug) System.out.println("\t regla dcl_list_vector entero");
             RESULT = new NodoDeclarationRow(tipoDec.entero, dcl_list_array,Integer.parseInt(ini),Integer.parseInt(end));
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECL_EXPRESION ::= error 
            {
              NodoBase RESULT =null;
		

               if(debug) System.out.println("\t regla 5");
               System.out.println("Error: Declaracion de sentencia dentro del bloque var-begin");

               RESULT= null;

           
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECL_EXPRESION",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXPRESION_GENERAL ::= EXPRESION_IF 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3a");
                RESULT=sif;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_GENERAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXPRESION_GENERAL ::= EXPRESION_REPEAT 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3b");
                    RESULT=srep;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_GENERAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXPRESION_GENERAL ::= EXPRESION_ASIGNACION 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3c");
                    RESULT=sasi;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_GENERAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXPRESION_GENERAL ::= EXPRESION_LEER 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3d");
                RESULT=slec;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_GENERAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION_GENERAL ::= EXPRESION_ESCRIBIR 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3e");
                RESULT=sesc;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_GENERAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION_GENERAL ::= EXPRESION_FOR 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 3g");
                RESULT=sfor;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_GENERAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION_GENERAL ::= error 
            {
              NodoBase RESULT =null;
		

            if(debug) System.out.println("\t regla 3f");
            System.out.println("Error: Declaracion de sentencia dentro del bloque begin-end");

            RESULT= null;

            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_GENERAL",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_LISTA ::= DECLARACION_LISTA COMMA EXPRESION_ASIGNACION 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(debug) System.out.println("\t regla 7a");

            if(debug) System.out.println("declaracion de lista de variables");
            NodoBase hijoActual = ini;
            if(hijoActual !=null){
                while(hijoActual.TieneHermano()){
                    hijoActual = hijoActual.getHermanoDerecha();
                }
                hijoActual.setHermanoDerecha(sent);
                RESULT=ini;
            }else{
                RESULT=sent;
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_LISTA ::= EXPRESION_ASIGNACION 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase var = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(debug) System.out.println("\t regla 7b");

            if(debug) System.out.println("asignacion simple");
            RESULT= var;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION_IF ::= IF EXPRESION_LOGICA THEN EXPRESION_SEQUENCIA END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if(debug) System.out.println("\t regla 4a");
                    RESULT = new NodoIf(ex,pthen);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION_IF ::= IF EXPRESION_LOGICA THEN EXPRESION_SEQUENCIA ELSE EXPRESION_SEQUENCIA END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    if(debug) System.out.println("\t regla 4b");
                    RESULT = new NodoIf(ex,pthen,pelse);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_IF",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION_REPEAT ::= REPEAT EXPRESION_SEQUENCIA UNTIL EXPRESION 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 5");
							RESULT = new NodoRepeat(cuerpo,prueba);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_REPEAT",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION_ASIGNACION ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(debug) System.out.println("declaracion de variable sin valor");
            if (variable != null)
                RESULT = new NodoAsignacion(new NodoIdentificador(variable.toString())); // Se inicializa un variable sin valor.
            else {
                RESULT = null;
                System.out.println("Ocurrio error en cup # 0001");
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPRESION_ASIGNACION ::= ID ASIGNACION EXPRESION_LOGICA 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 6 parte final");
                if(variable!=null) {
                    RESULT = new NodoAsignacion(new NodoIdentificador(variable.toString()),ex);
                } else{
                    RESULT = null;
                    System.out.println("Ocurrio error en cup # 0001");
                }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPRESION_ASIGNACION ::= ID LBRACKET EXPRESION_SIMPLE RBRACKET ASIGNACION EXPRESION_SIMPLE 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase exp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(debug) System.out.println("\t regla asignacion de vector");
                    if(variable!=null) {
                        RESULT = new NodoAsignacion(
                        new NodoIdentificador(variable.toString(),
                        exp),
                        ex);
                    } else{
                        RESULT = null;
                        System.out.println("Ocurrio error en cup # 0001");
                    }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXPRESION_LEER ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 7");
                System.out.println("Leyendo Variable");
                if(variable!=null)
					RESULT = new NodoLeer(variable.toString());
                else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
                }
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LEER",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXPRESION_ESCRIBIR ::= WRITE EXPRESION 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 8");
					RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_ESCRIBIR",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXPRESION_LOGICA ::= EXPRESION_NOT AND EXPRESION_LOGICA 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(debug) System.out.println("\t regla expresion logica AND");
            RESULT = new NodoOperacion(exI, tipoOp.and, exD);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXPRESION_LOGICA ::= EXPRESION_NOT OR EXPRESION_LOGICA 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(debug) System.out.println("\t regla expresion logica OR");
            RESULT = new NodoOperacion(exI, tipoOp.or, exD);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXPRESION_LOGICA ::= EXPRESION_NOT 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ex; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_LOGICA",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESION_NOT ::= NOT EXPRESION_NOT 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            if(debug) System.out.println("\t regla EXPRESION_NOT");
            RESULT = new NodoOperacionNot(tipoOp.not, ex);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_NOT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESION_NOT ::= EXPRESION 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla EXPRESION");
            RESULT = ex;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_NOT",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPRESION ::= EXPRESION_SIMPLE MENOR_QUE EXPRESION_SIMPLE 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9a");
								RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
								
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESION ::= EXPRESION_SIMPLE MAYOR_QUE EXPRESION_SIMPLE 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9d");
                            RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESION ::= EXPRESION_SIMPLE MENOR_IGUAL EXPRESION_SIMPLE 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9e");
                            RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= EXPRESION_SIMPLE MAYOR_IGUAL EXPRESION_SIMPLE 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9f");
                            RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= EXPRESION_SIMPLE IGUAL EXPRESION_SIMPLE 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9b");
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESION ::= EXPRESION_SIMPLE DISTINTO_DE EXPRESION_SIMPLE 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9b");
							RESULT = new NodoOperacion(exI,tipoOp.distinto,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= EXPRESION_SIMPLE 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 9c");
					RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION_SIMPLE ::= EXPRESION_SIMPLE PLUS TERMINO 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10a");
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_SIMPLE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION_SIMPLE ::= EXPRESION_SIMPLE MINUS TERMINO 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10b");
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_SIMPLE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION_SIMPLE ::= TERMINO 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 10c");
				RESULT=ex;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_SIMPLE",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TERMINO ::= TERMINO TIMES FACTOR 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11a");
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TERMINO ::= TERMINO OVER FACTOR 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11b");
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TERMINO ::= TERMINO MOD FACTOR 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    if(debug) System.out.println("\t regla MOD");
                    RESULT = new NodoOperacion(exI,tipoOp.mod,exD);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TERMINO ::= FACTOR 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 11c");
					RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TERMINO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FACTOR ::= LPAREN EXPRESION RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 12a");
							RESULT = ex;
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FACTOR ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 12b");
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(Integer.parseInt(valor));
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FACTOR ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla 12c");
					if(variable!=null){
					    if(variable.toString().equals("True")) {
                             RESULT = new NodoValor(1);
                         } else if(variable.toString().equals("False")) {
                             RESULT = new NodoValor(0);
                         }  else {
                            System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
                            RESULT= new NodoIdentificador(variable.toString());
						 }
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FACTOR ::= error 
            {
              NodoBase RESULT =null;
		 if(debug) System.out.println("\t regla 12d");
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION_FOR ::= FOR EXPRESION TO EXPRESION DO BEGIN EXPRESION_SEQUENCIA END 
            {
              NodoBase RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase condition = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int final_valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int final_valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase final_value = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla 13");
        RESULT = new NodoFor(condition, final_value, cuerpo);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION_FOR",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
